# Maintainer: Alexey Pavlov <Alexpux@gmail.com>

_realname=openssl
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
	"${MINGW_PACKAGE_PREFIX}-${_realname}-pdb")
pkgver=3.1.5
pkgrel=1
pkgdesc="The Open Source toolkit for Secure Sockets Layer and Transport Layer Security (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url='https://www.openssl.org/'
license=("spdx:Apache-2.0")
optdepends=("${MINGW_PACKAGE_PREFIX}-ca-certificates")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-autotools")
if [[ "$MSYSTEM" != CLANG* ]]; then
  makedepends+=("${MINGW_PACKAGE_PREFIX}-cv2pdb")
fi
options=('!strip' '!buildflags')
source=("https://www.openssl.org/source/openssl-${pkgver}.tar.gz"{,.asc}
        '001-support-aarch64.patch'
        '002-relocation.patch'
        '003-mingw32-broken-test.patch'
        '0001-test_rand-use-the-better-chomp.patch'
        'pathtools.c'
        'pathtools.h')
sha256sums=('6ae015467dabf0469b139ada93319327be24b98251ffaeceda0221848dc09262'
            'SKIP'
            '21b96771b401442570e885c2d5689a359a91e86dcbf5511db3667202b6c1fa8a'
            '8a2d91826bd1a8fd6d3a981d2a71cfb3170060f64a053eafd8e3b32f6a30ac3b'
            'f80607b2d59b97648952fb3b8de0e3423f023d67331e0e02696e27fbcf84774c'
            '56fcd20131ae0c563db18ae00c6ba3b95cd9cb1e9934548079284ba3f52ad250'
            '08209cbf1633fa92eae7e5d28f95f8df9d6184cc20fa878c99aec4709bb257fd'
            '965d3921ec4fdeec94a2718bc2c85ce5e1a00ea0e499330a554074a7ae15dfc6')

# https://www.openssl.org/community/otc.html
validpgpkeys=(
  '8657ABB260F056B1E5190839D9C4D26D0E604491' # Matt Caswell <matt@openssl.org>
  '7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C' # Richard Levitte <richard@levitte.org>
  'A21FAB74B0088AA361152586B8EF1A6BA9DA2D5C' # Tomáš Mráz <tm@t8m.info>
  'B7C1C14360F353A36862E4D5231C84CDDCC69C45' # Paul Dale <pauli@openssl.org>
  'EFC0A467D613CB83C7ED6D30D894E2CE8B3D79F5' # OpenSSL Management Committee <openssl-omc@openssl.org>
)

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}
# =========================================== #

prepare() {
  cd ${srcdir}/${_realname}-${pkgver}

  apply_patch_with_msg \
     001-support-aarch64.patch \
     002-relocation.patch \
     0001-test_rand-use-the-better-chomp.patch

  if [[ "$MSYSTEM" == MINGW32 ]]
  then
    # MINGW32 gmtime() doesn't handle negative values particularly well, which breaks a test that expects a
    # negative value after converting an invalid ASN1 string to time_t but can't compare the expected result
    # with the actual result
    apply_patch_with_msg 003-mingw32-broken-test.patch
  fi

  test ! -d "${startdir}/../mingw-w64-pathtools" || {
    cmp "${startdir}/../mingw-w64-pathtools/pathtools.c" "${srcdir}/pathtools.c" &&
    cmp "${startdir}/../mingw-w64-pathtools/pathtools.h" "${srcdir}/pathtools.h"
  } || exit 1

  cp -fHv "${srcdir}"/pathtools.c crypto/
  cp -fHv "${srcdir}"/pathtools.h ./
}

build() {
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  # Use mingw cflags instead of hardcoded ones
  sed -i -e '/^"mingw"/ s/-fomit-frame-pointer -O3 -Wall/-O2 -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4/' \
    ${srcdir}/${_realname}-${pkgver}/Configurations/10-main.conf

  case "${CARCH}" in
    i?86)
      _mingw=mingw
      ;;
    x86_64)
      _mingw=mingw64
      ;;
    aarch64)
      _mingw=mingwarm64
      ;;
  esac

  STRIP_OPTS=

  if [[ "$MSYSTEM" == CLANG* ]]
  then
    export LDFLAGS="-Wl,-pdb=" # Ensures that Clang generates PDB files
    STRIP=llvm-strip
    STRIP_OPTS=--strip-debug
  else
    STRIP=cv2pdb
  fi
  MSYS2_ARG_CONV_EXCL="--prefix=" \
  ../"${_realname}-${pkgver}"/Configure \
    --prefix="${MINGW_PREFIX}" \
    --libdir=lib \
    --openssldir=etc/ssl \
    ${_mingw} \
    shared \
    zlib-dynamic \
    enable-camellia \
    enable-capieng \
    enable-idea \
    enable-mdc2 \
    enable-rc5  \
    enable-rfc3779 \
    -DOPENSSLBIN=\"\\\"${MINGW_PREFIX}/bin\\\"\"

  MSYS2_ARG_CONV_EXCL="-DENGINESDIR=;-DMODULESDIR=;-DOPENSSLDIR=;-DINSTALLTOP=;-DOPENSSLBIN=" \
  make

  case "${pkgname[@]}" in
  *-pdb|*-pdb\ *)
    for file in apps/*.exe *.dll engines/*.dll
    do
      $STRIP $STRIP_OPTS "$file" || exit
    done

    # copy cv2pdb'ed versions of libeay32.dll and ssleay32.dll to apps/
    cp -f *.dll *.pdb apps/;;
  esac
}

check() {
  cd "${srcdir}/build-${MSYSTEM}"

  make VERBOSE=1 TESTS=-test_symbol_presence test
}

_package() {
  cd "${srcdir}/build-${MSYSTEM}"

  test pdb != "$1" || {
    install -d -m 755 "${pkgdir}${MINGW_PREFIX}/bin"
    install -d -m 755 "${pkgdir}${MINGW_PREFIX}/lib/engines"
    install -m 755 *.pdb "${pkgdir}${MINGW_PREFIX}/bin"
    install -m 755 apps/openssl.pdb "${pkgdir}${MINGW_PREFIX}/bin"
    install -m 755 engines/*.pdb "${pkgdir}${MINGW_PREFIX}/lib/engines"
    return
  }

  make install DESTDIR="${pkgdir}"

  install -Dm644 "${srcdir}/${_realname}-${pkgver}/LICENSE.txt" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE"
}

package_mingw-w64-i686-openssl() {
  _package
}

package_mingw-w64-x86_64-openssl() {
  _package
}

package_mingw-w64-clang-aarch64-openssl() {
  _package
}

package_mingw-w64-i686-openssl-pdb() {
  _package pdb
}

package_mingw-w64-x86_64-openssl-pdb() {
  _package pdb
}

package_mingw-w64-clang-aarch64-openssl-pdb() {
  _package pdb
}
