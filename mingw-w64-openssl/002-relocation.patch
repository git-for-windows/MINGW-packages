--- a/crypto/build.info
+++ b/crypto/build.info
@@ -107,7 +107,7 @@
         comp_methods.c cversion.c info.c cpt_err.c ebcdic.c uid.c o_time.c \
         o_dir.c o_fopen.c getenv.c o_init.c init.c trace.c provider.c \
         provider_child.c punycode.c passphrase.c sleep.c deterministic_nonce.c \
-        quic_vlint.c time.c defaults.c ssl_err.c
+        quic_vlint.c time.c defaults.c ssl_err.c pathtools.c
 SOURCE[../providers/libfips.a]=$UTIL_COMMON
 
 SOURCE[../libcrypto]=$UPLINKSRC
--- a/crypto/engine/eng_list.c
+++ b/crypto/engine/eng_list.c
@@ -12,6 +12,7 @@
 #define OPENSSL_SUPPRESS_DEPRECATED
 
 #include "eng_local.h"
+#include "pathtools.h"
 
 /*
  * The linked-list of pointers to engine types. engine_list_head incorporates
@@ -454,8 +455,13 @@
      * Prevent infinite recursion if we're looking for the dynamic engine.
      */
     if (strcmp(id, "dynamic")) {
-        if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL)
-            load_dir = ossl_get_enginesdir();
+        if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL) {
+            static char * reloc = NULL;
+            if (reloc == NULL) {
+                reloc = single_path_relocation_lib(OPENSSLBIN, ossl_get_enginesdir());
+            }
+            load_dir = reloc;
+        }
         iterator = ENGINE_by_id("dynamic");
         if (!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
             !ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
--- a/crypto/x509/x509_def.c
+++ b/crypto/x509/x509_def.c
@@ -10,6 +10,7 @@
 #include <stdio.h>
 #include "internal/e_os.h"
 #include "internal/cryptlib.h"
+#include "pathtools.h"
 #include "internal/thread_once.h"
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
@@ -47,19 +48,19 @@
 {
     get_windows_default_path(x509_private_dir, "\\private");
     if (strlen(x509_private_dir) > 0)
-        x509_private_dirptr = x509_private_dir;
+        x509_private_dirptr = single_path_relocation_lib(OPENSSLBIN, x509_private_dir);
 
     get_windows_default_path(x509_cert_area, "\\");
     if (strlen(x509_cert_area) > 0)
-        x509_cert_areaptr = x509_cert_area;
+        x509_cert_areaptr = single_path_relocation_lib(OPENSSLBIN, x509_cert_area);
 
     get_windows_default_path(x509_cert_dir, "\\certs");
     if (strlen(x509_cert_dir) > 0)
-        x509_cert_dirptr = x509_cert_dir;
+        x509_cert_dirptr = single_path_relocation_lib(OPENSSLBIN, x509_cert_dir);
 
     get_windows_default_path(x509_cert_file, "\\cert.pem");
     if (strlen(x509_cert_file) > 0)
-        x509_cert_fileptr = x509_cert_file;
+        x509_cert_fileptr = single_path_relocation_lib(OPENSSLBIN, x509_cert_file);
 
     return 1;
 }
--- a/crypto/provider_core.c
+++ b/crypto/provider_core.c
@@ -30,6 +30,7 @@
 #include "internal/core.h"
 #include "provider_local.h"
 #include "crypto/context.h"
+#include "pathtools.h"
 #ifndef FIPS_MODULE
 # include <openssl/self_test.h>
 #endif
@@ -989,8 +990,13 @@
 
             if (load_dir == NULL) {
                 load_dir = ossl_safe_getenv("OPENSSL_MODULES");
-                if (load_dir == NULL)
-                    load_dir = ossl_get_modulesdir();
+                if (load_dir == NULL) {
+                    static char * reloc = NULL;
+                    if (reloc == NULL) {
+                        reloc = single_path_relocation_lib(OPENSSLBIN, ossl_get_modulesdir());
+                    }
+                    load_dir = reloc;
+                }
             }
 
             DSO_ctrl(prov->module, DSO_CTRL_SET_FLAGS,
