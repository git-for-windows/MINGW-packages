# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

_realname=git

pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
	 "${MINGW_PACKAGE_PREFIX}-${_realname}-doc-html"
	 "${MINGW_PACKAGE_PREFIX}-${_realname}-doc-man")
test -z "SKIP_GIT_DOCS" ||
pkgname=("${pkgname[0]}")
tag=2.4.6.windows.1
pkgver=2.4.6.1.43f871f
pkgrel=2
pkgdesc="The fast distributed version control system (mingw-w64)"
arch=('any')
url="http://git-for-windows.github.io/"
license=('GPL2')

makedepends=('python2' 'less' 'openssh' 'patch' 'make' 'tar' 'diffutils'
	'ca-certificates' 'asciidoc' 'xmlto'
	"${MINGW_PACKAGE_PREFIX}-asciidoctor-extensions")

depends=("${MINGW_PACKAGE_PREFIX}-curl"
         "${MINGW_PACKAGE_PREFIX}-ca-certificates"
         "${MINGW_PACKAGE_PREFIX}-expat>=2.0"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-pcre"
         "${MINGW_PACKAGE_PREFIX}-tcl"
         "${MINGW_PACKAGE_PREFIX}-tk"
         "perl-Error"
         "perl>=5.14.0"
         "perl-Authen-SASL"
         "perl-libwww"
         "perl-MIME-tools"
         "perl-Net-SMTP-SSL"
         "perl-TermReadKey")

source=("${_realname}"::"git+https://github.com/git-for-windows/git.git#tag=v$tag")

md5sums=('SKIP')

pkgver() {
  cd "$srcdir/git"
  basever=${tag%.windows.*}
  test "$tag" = "$basever" ||
  basever="$basever.${tag##*.windows.}"
  printf "%s.%s" "${basever}" "$(git rev-parse --short HEAD)"
}

case "$CARCH" in
i686)
  ASCIIDOCTORDIR=/mingw32/lib/asciidoctor-extensions
  SHAREDIR=/mingw32/share/git
  ;;
x86_64)
  ASCIIDOCTORDIR=/mingw64/lib/asciidoctor-extensions
  SHAREDIR=/mingw64/share/git
  ;;
esac

build() {
  export PYTHON_PATH=/usr/bin/python2
  cd "$srcdir/git"

  if test false != "$(git config core.autocrlf)"
  then
    git config core.autocrlf false
    rm .git/index
    git stash
  fi

  # Git wants to decide itself whether to use ANSI stdio emulation or not
  CPPFLAGS="$(echo "$CPPFLAGS" |
	sed 's/-D__USE_MINGW_ANSI_STDIO\(=[0-9]*\)\?//')"

  # use the PARALLEL_BUILD environment variable if is set,
  # otherwise default to one job at a time
  # for example, PARALLEL_BUILD=-j8
  counter=0
  while ! if test -z "$SKIP_GIT_DOCS"
    then
      make "${PARALLEL_BUILD:--j1}" \
        ASCIIDOC=asciidoctor ASCIIDOC_HTML=html5 \
        ASCIIDOC_DOCBOOK=docbook45
        ASCIIDOC_EXTRA="'-alitdd=&#45;&#45;'" \
        ASCIIDOC_CONF="-I$ASCIIDOCTORDIR -rman-inline-macro" \
        all html man
    else
      make "${PARALLEL_BUILD:--j1}" all
    fi
  do
    counter=$(($counter+1))
    test $counter -lt 5 || {
      echo "Could not build (tried 5 times)" >&2
      exit 1
    }
  done &&

  (cd $startdir &&
   for basename in git-bash git-cmd git-wrapper gitk compat-bash
   do
	windres -O coff $basename.rc -o $srcdir/git/$basename.res || break
   done
  ) &&
  gcc -mwindows -s -O2 -Wall -o git-bash.exe git-bash.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mconsole -s -O2 -Wall -o git-cmd.exe git-cmd.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mconsole -s -O2 -Wall -o compat-bash.exe compat-bash.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  mkdir -p cmd &&
  gcc -mconsole -s -O2 -Wall -o cmd/git.exe git-wrapper.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mwindows -s -O2 -Wall -o cmd/gitk.exe gitk.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  gcc -mwindows -s -O2 -Wall -o cmd/git-gui.exe gitk.res \
	compat/win32/git-wrapper.o git.res -lshlwapi &&
  cat >print.mak <<\EOF &&
include Makefile

print-builtins:
	@echo $(BUILT_INS)
EOF
  make -f print.mak print-builtins | tr ' ' '\n' > builtins.txt &&

  CC=gcc make -C contrib/credential/wincred
}

package_git () {
  backup=("${MINGW_PREFIX#/}/etc/gitconfig")

  export PYTHON_PATH=/usr/bin/python2
  cd "$srcdir"/git

  make DESTDIR="$pkgdir" install

  # completions
  PREFIX="$(expr "$(cat < GIT-PREFIX)" : '[^:]*:[^:]*:[^:]*:\([^:]*\):[^:]*')"
  install -d "$pkgdir/$PREFIX/share/git/completion/"
  install contrib/completion/* "$pkgdir/$PREFIX/share/git/completion/"

  # subtree, for backwards-compatibility with MSys2's Git package
  make -C contrib/subtree prefix="$pkgdir/$PREFIX" install

  # git-credential-wincred.exe
  make -C contrib/credential/wincred prefix="$pkgdir/$PREFIX" install

  # Git Bash, Git CMD
  install -d -m755 $pkgdir$SHAREDIR
  install -m755 $startdir/git-for-windows.ico $pkgdir$SHAREDIR
  install -m755 git-bash.exe git-cmd.exe $pkgdir

  # Compatibility Bash
  install -m755 compat-bash.exe $pkgdir$SHAREDIR

  # Install Git wrapper into /cmd/
  install -d -m755 $pkgdir/cmd
  install -m755 cmd/git.exe cmd/gitk.exe cmd/git-gui.exe \
	$startdir/start-ssh-agent.cmd $pkgdir/cmd

  # Install builtins.txt
  install -m644 builtins.txt $pkgdir$SHAREDIR

  # Set path to CA cert bundle in system-wide gitconfig so https works
  local etcdir="$pkgdir/$PREFIX/etc"
  mkdir -p "$etcdir"
  local config_cmd="$pkgdir/$PREFIX/libexec/git-core/git-config"
  local certpath="$PREFIX/ssl/certs/ca-bundle.crt"
  "$config_cmd" -f "$etcdir/gitconfig" http.sslCAInfo "$certpath"
}

package_git-doc-html () {
  cd "$srcdir"/git

  make DESTDIR="$pkgdir" install-html
}

package_git-doc-man () {
  cd "$srcdir"/git

  make DESTDIR="$pkgdir" install-man
}

package_mingw-w64-i686-git () {
  package_git
}

package_mingw-w64-i686-git-doc-html () {
  package_git-doc-html
}

package_mingw-w64-i686-git-doc-man () {
  package_git-doc-man
}

package_mingw-w64-x86_64-git () {
  package_git
}

package_mingw-w64-x86_64-git-doc-html () {
  package_git-doc-html
}

package_mingw-w64-x86_64-git-doc-man () {
  package_git-doc-man
}
