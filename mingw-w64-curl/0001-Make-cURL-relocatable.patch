From 9bc4150738ef5d92b0050f8539758c8f03335442 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 22 Feb 2017 11:03:04 +0100
Subject: [PATCH 1/2] Make cURL relocatable

This adds the ability to specify CA_BUNDLE paths that are relative to
the MSYS2 pseudo-root directory.

To make it truly relocatable, we use the path to the *cURL library*
instead of the path to the current .exe to determine the location of the
pseudo-root directory (allowing the .exe file to live completely outside
of the MSYS2 system, e.g. in $HOME/bin). This requires Win32 API
available in Windows XP & 2003 and later, well within the Windows
versions supported by Cygwin (and therefore MSYS2).

We also need to be extra careful to extend that path logic to the
ca-bundle.crt used to validate HTTPS *proxies*, not only HTTPS servers.

Note: This patch relies on the `pathtools.c` and `pathtools.h` files to
be copied from `mingw-w64-pathtools` into `lib/`.

Original-patch-by: Ray Donnelly <mingw.android@gmail.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 configure.ac         |  1 +
 lib/Makefile.inc     |  2 ++
 lib/curl_config.h.in |  3 +++
 lib/url.c            | 38 ++++++++++++++++++++++++++++++++++++++
 4 files changed, 44 insertions(+)

diff --git a/configure.ac b/configure.ac
index aba3d82af..2d30abb2c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4027,6 +4027,7 @@ dnl default includes
 ]
 )
 
+AC_DEFINE_UNQUOTED(CURL_BINDIR, "${prefix}/bin", [bindir])
 
 dnl Checks for typedefs, structures, and compiler characteristics.
 AC_C_CONST
diff --git a/lib/Makefile.inc b/lib/Makefile.inc
index b384e0962..216fec947 100644
--- a/lib/Makefile.inc
+++ b/lib/Makefile.inc
@@ -225,6 +225,7 @@ LIB_CFILES =         \
   noproxy.c          \
   openldap.c         \
   parsedate.c        \
+  pathtools.c        \
   pingpong.c         \
   pop3.c             \
   progress.c         \
@@ -357,6 +358,7 @@ LIB_HFILES =         \
   netrc.h            \
   noproxy.h          \
   parsedate.h        \
+  pathtools.h        \
   pingpong.h         \
   pop3.h             \
   progress.h         \
diff --git a/lib/curl_config.h.in b/lib/curl_config.h.in
index 87d60a274..990895776 100644
--- a/lib/curl_config.h.in
+++ b/lib/curl_config.h.in
@@ -14,6 +14,9 @@
 /* If safe CA bundle search is enabled */
 #undef CURL_CA_SEARCH_SAFE
 
+/* Location of executable */
+#undef CURL_BINDIR
+
 /* Default SSL backend */
 #undef CURL_DEFAULT_SSL_BACKEND
 
diff --git a/lib/url.c b/lib/url.c
index dac24b35e..6fe831e1e 100644
--- a/lib/url.c
+++ b/lib/url.c
@@ -121,6 +121,9 @@
 #include "curlx/dynbuf.h"
 #include "headers.h"
 #include "curlx/strparse.h"
+#if defined(__MINGW32__)
+#include "pathtools.h"
+#endif
 /* The last 3 #include files should be in this order */
 #include "curl_printf.h"
 #include "curl_memory.h"
@@ -430,22 +433,57 @@ CURLcode Curl_init_userdefined(struct Curl_easy *data)
   if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL &&
      Curl_ssl_backend() != CURLSSLBACKEND_SECURETRANSPORT) {
 #ifdef CURL_CA_BUNDLE
+#ifdef __MINGW32__
+    const size_t path_max = PATH_MAX;
+    char relocated_bundle[path_max];
+    get_dll_path(relocated_bundle, path_max);
+    strip_n_suffix_folders(relocated_bundle, 1);
+    strncat(relocated_bundle, "/", path_max - 1);
+    char *relative = get_relative_path(CURL_BINDIR, CURL_CA_BUNDLE);
+    strncat(relocated_bundle, relative, path_max - 1);
+    free((void*)relative);
+    simplify_path(relocated_bundle);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], relocated_bundle);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
+#endif /* defined(__MINGW32__) */
     if(result)
       return result;
 #ifndef CURL_DISABLE_PROXY
+#if defined(__MINGW32__)
+    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
+			    relocated_bundle);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
                             CURL_CA_BUNDLE);
+#endif
     if(result)
       return result;
 #endif
 #endif
 #ifdef CURL_CA_PATH
+#ifdef __MINGW32__
+    const size_t path_max = PATH_MAX;
+    char relocated_ca_path[path_max];
+    get_dll_path(relocated_ca_path, path_max);
+    strip_n_suffix_folders(relocated_ca_path, 1);
+    strncat(relocated_ca_path, "/", path_max - 1);
+    char *relative = get_relative_path(CURL_BINDIR, CURL_CA_PATH);
+    strncat(relocated_ca_path, relative, path_max - 1);
+    free((void*)relative);
+    simplify_path(relocated_ca_path);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], relocated_ca_path);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
+#endif /* defined(__MINGW32__) */
     if(result)
       return result;
 #ifndef CURL_DISABLE_PROXY
+#if defined(__MINGW32__)
+    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], relocated_ca_path);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
+#endif
     if(result)
       return result;
 #endif
